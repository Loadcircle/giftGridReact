{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","ok","json","data","gifs","map","img","id","title","images","downsized_medium","GridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","resp","useFetchGifs","key","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sLAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAsB5C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAG1BR,GAAc,SAAAS,GAAG,MAAE,CAACP,MACpBC,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GACpBH,EAAWM,OAAS,IACnBL,EAAcE,EAAEQ,OAAOF,Y,uBCVtBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEII,MAAMF,GAFV,YAEbG,EAFa,QAIPC,GAJO,iCAKMD,EAASE,OALf,uBAKRC,EALQ,EAKRA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACCC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXX,IAAKS,EAAIG,OAAOC,iBAAiBb,QAX9B,kBAeRO,GAfQ,4CAAH,sDCEPO,EAAW,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOX,EAAS,EAATA,IAE7B,OACI,yBAAKe,UAAU,8CACX,yBAAKC,IAAKhB,EAAKiB,IAAKN,IACpB,2BAAIA,KCHHO,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAY,IAAD,EAEVd,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJuB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAsBpC,OAbAC,qBAAU,WACNzB,EAAQC,GACHyB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACrB,IAKGsB,EDlB0BK,CAAa3B,GAAjCc,EAHsB,EAG3BN,KAAaa,EAHc,EAGdA,QAErB,OACI,oCACI,wBAAIO,IAAK5B,GAAWA,GAEnBqB,GAAW,yCACZ,yBAAKJ,UAAU,gBAEPH,EAAOJ,KAAI,SAAAmB,GAAK,OACZ,kBAAC,EAAD,eACID,IAAKC,EAAMjB,IACPiB,UEdnBC,EAAe,WAAM,MAGM5C,mBAAS,CAAC,cAHhB,mBAGvB6C,EAHuB,KAGX9C,EAHW,KAK9B,OACI,6BACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQ8C,EAAWrB,KAAK,SAAAV,GAAQ,OACpB,kBAAC,EAAD,CACIA,SAAUA,EACV4B,IAAK5B,U,MCbjCgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.a97632fa.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    //si useState() se deja vacio, el valor inicial sera undefined, asi que utilizar un string vacio\r\n    const [inputValue, setInputValue] = useState(''); \r\n\r\n    const handleInputChange = (e)=>{\r\n        if(inputValue.length < 15){\r\n            setInputValue(e.target.value)\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            \r\n            //aca llamamos el callback que enviamos\r\n            setCategories(cat=>[inputValue]);\r\n            setInputValue('')\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=eILCUAskAcPzXTBeMZDPlAg2eA2W8MSV`\r\n    const response = await fetch(url);\r\n\r\n    if(response.ok){\r\n        const {data} = await response.json();\r\n        \r\n        const gifs = data.map(img=>{\r\n            return {\r\n                    id: img.id, \r\n                    title: img.title, \r\n                    url: img.images.downsized_medium.url\r\n                }                \r\n        });\r\n        \r\n        return gifs;\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const GridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__rubberBand\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GridItem } from './GridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    //para cambiar el nombre de data a images\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 key={category}>{category}</h3>\r\n            {/* esto es un operador ternario simple, si el primero es cierto muestra */}\r\n            {loading && <p>Loading...</p> }\r\n            <div className=\"card_wrapper\">\r\n                {\r\n                    images.map(image=>(\r\n                        <GridItem\r\n                            key={image.id}\r\n                            {...image}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category)=>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //esta funci贸n hace que esta fracci贸n de c贸digo solo se ejecute 1 vez (gracias al [])    \r\n    //Los hooks no pueden ser async\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(resp=>{\r\n                setState({\r\n                    data: resp,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, [category])\r\n    //con la [ category ] le decimos que si la categoria cambia vuelva a ejecutar el c贸digo\r\n    //en este caso nunca va a ocurrir\r\n    \r\n\r\n    return state; // retornamos el objeto {data:  [], loading: true}\r\n\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //en react no te permite modificar constantes\r\n    const [categories, setCategories] = useState(['One punch'])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>            \r\n            <ol>\r\n                {\r\n                    categories.map( category=> \r\n                        <GifGrid \r\n                            category={category}\r\n                            key={category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}